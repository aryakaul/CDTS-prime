#!/bin/bash
set -e
set -o pipefail

extract_tolerance_score_annotaware() {
    start=$(date +%s)
    log "Computing Tolerance Score"

    awk -v OFS='\t' -F'\t' '{print $1, 0}' $1/"$2"mermetrics/"$2"mer_highconf_gnomadupdate_hg38_autosomesAndPAR.txt \
        > $1/"$2"mermetrics/"$2"mer_variation_afabovethreshold_highconf_gnomadupdate_hg38_autosomesAndPAR.txt
    
    afth=$3
    for chroms in $(seq 1 22 | cat - <(echo "XPAR"))
    do
        
        # first extract kmeric sequence from positions that vary with af above the specified threshold (but not coming from singletons)
        [ ! -s $1/af/gnomad_PASS_SNV_chr${chroms}_afabovethreshold_highconf.bed.gz ] &&
            unstarch $1/af/gnomad_PASS_SNV_chr${chroms}_af_highconf.starch \
            | grep -v "sglt" \
            | awk -v OFS='\t' -F'\t' -v af=${afth} '{if ($11>=af) print $0}' \
            | bedmap --echo --echo-map-id --skip-unmapped - <(zcat $1/genome/"$2"mer_hg38_highconf_gnomadupdate_chr${chroms}.bed.gz \
                | sed 's/::/\t/g' \
                | cut -f1,2,3,5) \
            | sed 's/|/\t/g' \
            | gzip - \
            > $1/af/gnomad_PASS_SNV_chr${chroms}_afabovethreshold_highconf.bed.gz
        
        # extract counts of kmer that vary with an allelic frequency above the specified threshold
        [ ! -s $1/"$2"mermetrics/"$2"mer_variation_afabovethreshold_highconf_gnomadupdate_hg38_chr${chroms}.txt ] &&
            zcat $1/af/gnomad_PASS_SNV_chr${chroms}_afabovethreshold_highconf.bed.gz \
            | cut -f 14 \
            | python $5/countkmer.py 1 $2 \
            > $1/"$2"mermetrics/"$2"mer_variation_afabovethreshold_highconf_gnomadupdate_hg38_chr${chroms}.txt
        
        # sum all kmer counts from autosomes and PAR
        paste $1/"$2"mermetrics/"$2"mer_variation_afabovethreshold_highconf_gnomadupdate_hg38_autosomesAndPAR.txt \
            $1/"$2"mermetrics/"$2"mer_variation_afabovethreshold_highconf_gnomadupdate_hg38_chr${chroms}.txt \
            | awk -v OFS='\t' -F'\t' '{if ($1==$3) print $1, $2+$4}' \
            > tmp.txt
        mv tmp.txt $1/"$2"mermetrics/"$2"mer_variation_afabovethreshold_highconf_gnomadupdate_hg38_autosomesAndPAR.txt
        log "Computed for chrom $chroms"
    done
   
    # do the same thing for the X chromosome
    afth=$4
    [ ! -s $1/af/gnomad_PASS_SNV_chrXnotPAR_afabovethreshold_highconf.bed.gz ] &&
        unstarch $1/af/gnomad_PASS_SNV_chrXnotPAR_af_highconf.starch \
        | grep -v "sglt" \
        | awk -v OFS='\t' -F'\t' -v af=${afth} '{if ($11>=af) print $0}' \
        | bedmap --echo --echo-map-id --skip-unmapped - <(zcat $1/genome/"$2"mer_hg38_highconf_gnomadupdate_chrXnotPAR.bed.gz \
        | sed 's/::/\t/g' \
        | cut -f1,2,3,5) \
        | sed 's/|/\t/g' \
        | gzip - \
        > $1/af/gnomad_PASS_SNV_chrXnotPAR_afabovethreshold_highconf.bed.gz
    
    [ ! -s $1/"$2"mermetrics/"$2"mer_variation_afabovethreshold_highconf_gnomadupdate_hg38_chrXnotPAR.txt ] &&
        zcat $1/af/gnomad_PASS_SNV_chrXnotPAR_afabovethreshold_highconf.bed.gz \
        | cut -f 14 \
        | python $5/countkmer.py 1 $2 \
        > $1/"$2"mermetrics/"$2"mer_variation_afabovethreshold_highconf_gnomadupdate_hg38_chrXnotPAR.txt
  
    # make tolerance fraction. divide the obs count by the exp
    mkdir -p $1/"$2"mermetrics/Dico
    paste $1/"$2"mermetrics/"$2"mer_highconf_gnomadupdate_hg38_autosomesAndPAR.txt \
        $1/"$2"mermetrics/"$2"mer_variation_afabovethreshold_highconf_gnomadupdate_hg38_autosomesAndPAR.txt \
    | awk -v OFS='\t' -F'\t' '{if ($1==$3) print $1, $4/$2}' \
    > $1/"$2"mermetrics/Dico/TS_autosomesAndPAR.txt
    
    paste $1/"$2"mermetrics/"$2"mer_highconf_gnomadupdate_hg38_chrXnotPAR.txt \
        $1/"$2"mermetrics/"$2"mer_variation_afabovethreshold_highconf_gnomadupdate_hg38_chrXnotPAR.txt \
    | awk -v OFS='\t' -F'\t' '{if ($1==$3 && $2!=0) {print $1, $4/$2} else {print $1, -1}}' \
    > $1/"$2"mermetrics/Dico/TS_chrXnotPAR.txt
    
    end=$(date +%s)
    runtime=$(((end-start)/60))
    log "Time Taken" "$runtime minutes"
}

log() {
    lcol='\033[1;33m' lcol2='\033[1;36m' lclr='\033[m'
    printf '%b%s %b%s%b %s\n' \
        "$lcol" "${3:-->}" "${lclr}${2:+$lcol2}" "$1" "$lclr" "$2" >&2
}

die() {
    log "$1" "$2" "${3:-ERROR}"
    exit 2
}

main() {
    OUTDIR=""
    KMER=7
    WD="."
    AFTH=0.0001
    AFTHX=0.000075
    SLIDING=10
    WINDOW=550
    for i in "$@"; do
    case $i in
        -o|--outdir)
        OUTDIR="$2"
        shift
        shift
        ;;
        -w|--working)
        WD="$2"
        shift
        shift
        ;;
        -k|--kmer)
        KMER="$2"
        shift
        shift
        ;;
        -a|--allelefreqthresh)
        AFTH="$2"
        shift
        shift
        ;;
        -ax|--allelefreqthreshX)
        AFTHX="$2"
        shift
        shift
        ;;
        -s|--sliding)
        SLIDING="$2"
        shift
        shift
        ;;
        -wi|--window)
        WINDOW="$2"
        shift
        shift
        ;;
        -h|--help)
        usage
        exit
        ;;
        *)
        ;;
    esac
    done
    extract_tolerance_score $OUTDIR $KMER $AFTH $AFTHX $WD && log "SUCCESSFUL" "Tolerance score calculated" "STEP 4A" || die "Step 4A failed"
}
main "$@"
