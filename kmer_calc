#!/bin/bash
set -e

get_kmer_specific() {
    start=$(date +%s)
    log "Downloading hg38 reference"
    mkdir -p $1/genome
    CHOICE=$3
    wget -q -N -P $1/genome "https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/hg38.chrom.sizes"
    cat $1/genome/hg38.chrom.sizes | head -24 | sed 's/^chr//g' > $1/genome/chrLength_hg38.txt
    if [ ! -f $1/genome/hg38_reference.fasta ]; then
        wget -q -N -P $1/genome "https://hgdownload.soe.ucsc.edu/goldenPath/hg38/bigZips/latest/hg38.fa.gz"
        zcat $1/genome/hg38.fa.gz | sed 's/^>chr/>/g' > $1/genome/hg38_reference.fasta
    else
        log "  Already downloaded... skipping."
    fi
   
    region=$(($2/2))
    log "Extracting $2-mer context"
    while read -r chroms; do
        log "Extracting $2-mer context -- chr$chroms"
        if [ ! -s $1/genome/"$2"mer_hg38_chr"$chroms"_noN.bed.gz ]; then
            #| awk -v r=$region -v OFS='\t' -F'\t' '{for(i=r; i<=($2-(r+1)); i++)} \
            grep -w ${chroms} $1/genome/chrLength_hg38.txt \
                | awk -v r="$region" -v OFS='\t' -F'\t' '{for(i=r; i<=($2-r+1); i++) \
                    print $1, ".", $1"_"i"_"i+1, i-"'$region'"+1, i+"'$region'"+1, ".", "+", ".", "ID=;Name="}' \
                | fastaFromBed -fi $1/genome/hg38_reference.fasta -bed stdin -fo stdout -s -name \
                | sed -e 'N;s/\n/\t/' -e 's/>//g' -e 's/_/\t/g' \
                | awk -v OFS='\t' -F'\t' '{$4 = toupper($4); print $0}' \
                | grep -v "N" \
                | gzip - \
                > $1/genome/"$2"mer_hg38_chr"$chroms"_noN.bed.gz &
        else
            continue
        fi
    done < $1/chromList.txt
    wait
    
    end=$(date +%s)
    runtime=$(((end-start)/60))
    log "Time Taken" "$runtime minutes"

    mkdir -p $1/genome/$CHOICE
    log "Remove everything that didn't pass QC and update reference nucleotide where it differs from hg38"
    for chroms in $(seq 1 22); do
        log "Filtering chrom $chroms"
        if [ ! -f $1/genome/$CHOICE/"$2"mer_hg38_highconf_gnomadupdate_chr"$chroms".bed.gz ]; then
            bedmap --echo --skip-unmapped <(zcat $1/genome/"$2"mer_hg38_chr${chroms}_noN.bed.gz) \
                $1/qc/$CHOICE/confidentRegions_nolowcov_nohighmissingness_hg38_autosomesAndPAR.starch \
            | bedmap --echo --echo-map-id --echo-map-score - \
                $1/af/$CHOICE/gnomad_PASS_SNV_chr${chroms}_af_highconf_wrongref_idx_newref.starch \
            | sed -e 's/||$//' -e 's/|/\t/g' \
            | awk -v OFS='\t' -F'\t' '{if (NF==4) print $0; \
                else {split($4,seq,""); split($5,ref,";"); split($6,idx,";"); \
                for (i=1;i<=length(idx);i++) seq[int(idx[i])]=ref[i]; \
                print $1, $2, $3, seq[1]seq[2]seq[3]seq[4]seq[5]seq[6]seq[7]}}' \
            | gzip - \
            > $1/genome/$CHOICE/"$2"mer_hg38_highconf_gnomadupdate_chr"$chroms".bed.gz &
        else
            continue
        fi
    done
    wait

    log "Filtering XPAR"
    if [ ! -f $1/genome/$CHOICE/"$2"mer_hg38_highconf_gnomadupdate_chrXPAR.bed.gz ]; then 
        bedmap --echo --skip-unmapped <(zcat $1/genome/"$2"mer_hg38_chrX_noN.bed.gz) $1/qc/$CHOICE/confidentRegions_nolowcov_nohighmissingness_hg38_autosomesAndPAR.starch \
        | bedmap --echo --echo-map-id --echo-map-score - \
            $1/af/$CHOICE/gnomad_PASS_SNV_chrXPAR_af_highconf_wrongref_idx_newref.starch \
        | sed -e 's/||$//' -e 's/|/\t/g' \
        | awk -v OFS='\t' -F'\t' '{if (NF==4) print $0; \
            else {split($4,seq,""); split($5,ref,";"); split($6,idx,";"); \
            for (i=1;i<=length(idx);i++) seq[int(idx[i])]=ref[i]; \
            print $1, $2, $3, seq[1]seq[2]seq[3]seq[4]seq[5]seq[6]seq[7]}}' \
        | gzip - \
        > $1/genome/$CHOICE/"$2"mer_hg38_highconf_gnomadupdate_chrXPAR.bed.gz
    fi
    
    log "Filtering notXPAR"
    if [ ! -f $1/genome/"$2"mer_hg38_highconf_gnomadupdate_chrXnotPAR.bed.gz ]; then 
        bedmap --echo --skip-unmapped <(zcat $1/genome/"$2"mer_hg38_chrX_noN.bed.gz) $1/qc/$CHOICE/confidentRegions_nolowcov_nohighmissingness_hg38_chrXnotPAR.starch \
        | bedmap --echo --echo-map-id --echo-map-score - $1/af/$CHOICE/gnomad_PASS_SNV_chrXnotPAR_af_highconf_wrongref_idx_newref.starch \
        | sed -e 's/||$//' -e 's/|/\t/g' \
        | awk -v OFS='\t' -F'\t' '{if (NF==4) print $0; \
            else {split($4,seq,""); split($5,ref,";"); split($6,idx,";"); \
                for (i=1;i<=length(idx);i++) seq[int(idx[i])]=ref[i]; \
                    print $1, $2, $3, seq[1]seq[2]seq[3]seq[4]seq[5]seq[6]seq[7]}}' \
        | gzip - \
        > $1/genome/$CHOICE/"$2"mer_hg38_highconf_gnomadupdate_chrXnotPAR.bed.gz
    fi
    end=$(date +%s)
    runtime=$(((end-start)/60))
    log "Time Taken" "$runtime minutes"
}

extract_kmer_counts_specific() {
    start=$(date +%s)
    CHOICE=$4
    mkdir -p "$1"/"$2"mermetrics/$CHOICE
    while read -r chroms; do
        log "Extracting kmer counts for chr$chroms"
        if [ ! -s "$1"/"$2"mermetrics/$CHOICE/"$2"mer_highconf_gnomadupdate_hg38_chr${chroms}.txt ]
        then
            zcat $1/genome/$CHOICE/"$2"mer_hg38_highconf_gnomadupdate_chr${chroms}.bed.gz \
                | cut -f 4 \
                | python $3/countkmer.py 1 $2 \
                > "$1"/"$2"mermetrics/$CHOICE/"$2"mer_highconf_gnomadupdate_hg38_chr${chroms}.txt &
        else
            continue
        fi
    done < $1/chromList_PARsplit.txt
    wait

    cp "$1"/"$2"mermetrics/$CHOICE/"$2"mer_highconf_gnomadupdate_hg38_chrXPAR.txt \
        "$1"/"$2"mermetrics/$CHOICE/"$2"mer_highconf_gnomadupdate_hg38_autosomesAndPAR.txt
    for chroms in `seq 1 22`; do
        paste "$1"/"$2"mermetrics/$CHOICE/"$2"mer_highconf_gnomadupdate_hg38_autosomesAndPAR.txt \
         "$1"/"$2"mermetrics/$CHOICE/"$2"mer_highconf_gnomadupdate_hg38_chr${chroms}.txt | \
            awk -v OFS='\t' -F'\t' '{if ($1==$3) print $1, $2+$4}' > $1/tmp.txt
        mv $1/tmp.txt "$1"/"$2"mermetrics/$CHOICE/"$2"mer_highconf_gnomadupdate_hg38_autosomesAndPAR.txt
    done
    end=$(date +%s)
    runtime=$(((end-start)/60))
    log "Time Taken" "$runtime minutes"
}

log() {
    lcol='\033[1;33m' lcol2='\033[1;36m' lclr='\033[m'
    printf '%b%s %b%s%b %s\n' \
        "$lcol" "${3:-->}" "${lclr}${2:+$lcol2}" "$1" "$lclr" "$2" >&2
}

die() {
    log "$1" "$2" "${3:-ERROR}"
    exit 2
}

main() {
    OUTDIR=""
    KMER=7
    WD="."
    OPTIONS="male female"
    for i in "$@"; do
    case $i in
        -o|--outdir)
        OUTDIR="$2"
        shift
        shift
        ;;
        -w|--working)
        WD="$2"
        shift
        shift
        ;;
        -k|--kmer)
        KMER="$2"
        shift
        shift
        ;;
        -ch|--choice)
        OPTIONS="$2"
        shift
        shift
        ;;
        -h|--help)
        usage
        exit
        ;;
        *)
        ;;
    esac
    done
    
    log "Extracting Kmers" "..." "STEP 3"
    [[ $(($KMER%2)) == 0 ]] && die "Kmer value selected is not odd!" 
    
    log "Computing kmers for each position" "..." "STEP 3A"
    for CHOICE in $OPTIONS; do 
        get_kmer_specific $OUTDIR $KMER $CHOICE && log "SUCCESSFUL" "Kmer computed for each position" "STEP 3A" || die "Step 3A failed"
    done
    
    
    log "Extract kmer metrics" "..." "STEP 3B"
    for CHOICE in $OPTIONS; do 
        extract_kmer_counts_specific $OUTDIR $KMER $WD $CHOICE && log "SUCCESSFUL" "Kmer metrics computed" "STEP 3B" || die "Step 3B failed"
    done
}

main "$@"
